// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	feed "dating-app/domain/feed"

	mock "github.com/stretchr/testify/mock"
)

// FeedRepository is an autogenerated mock type for the FeedRepository type
type FeedRepository struct {
	mock.Mock
}

// GetFeedProfileUids provides a mock function with given fields: ctx, userUid, excludedUids, limit
func (_m *FeedRepository) GetFeedProfileUids(ctx context.Context, userUid string, excludedUids []string, limit int) ([]string, error) {
	ret := _m.Called(ctx, userUid, excludedUids, limit)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, int) []string); ok {
		r0 = rf(ctx, userUid, excludedUids, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []string, int) error); ok {
		r1 = rf(ctx, userUid, excludedUids, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileByUids provides a mock function with given fields: ctx, uids
func (_m *FeedRepository) GetProfileByUids(ctx context.Context, uids []string) ([]feed.FeedProfile, error) {
	ret := _m.Called(ctx, uids)

	var r0 []feed.FeedProfile
	if rf, ok := ret.Get(0).(func(context.Context, []string) []feed.FeedProfile); ok {
		r0 = rf(ctx, uids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]feed.FeedProfile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, uids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFeedRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFeedRepository creates a new instance of FeedRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFeedRepository(t mockConstructorTestingTNewFeedRepository) *FeedRepository {
	mock := &FeedRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
