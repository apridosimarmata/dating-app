// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	subscription "dating-app/domain/subscription"

	mock "github.com/stretchr/testify/mock"
)

// SubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type SubscriptionRepository struct {
	mock.Mock
}

// GetPackageById provides a mock function with given fields: ctx, packageId
func (_m *SubscriptionRepository) GetPackageById(ctx context.Context, packageId int) (*subscription.Package, error) {
	ret := _m.Called(ctx, packageId)

	var r0 *subscription.Package
	if rf, ok := ret.Get(0).(func(context.Context, int) *subscription.Package); ok {
		r0 = rf(ctx, packageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscription.Package)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, packageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionByUid provides a mock function with given fields: ctx, uid
func (_m *SubscriptionRepository) GetSubscriptionByUid(ctx context.Context, uid string) (*subscription.Subscription, error) {
	ret := _m.Called(ctx, uid)

	var r0 *subscription.Subscription
	if rf, ok := ret.Get(0).(func(context.Context, string) *subscription.Subscription); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*subscription.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertSubscription provides a mock function with given fields: ctx, _a1
func (_m *SubscriptionRepository) InsertSubscription(ctx context.Context, _a1 subscription.Subscription) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, subscription.Subscription) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSubscription provides a mock function with given fields: ctx, _a1
func (_m *SubscriptionRepository) UpdateSubscription(ctx context.Context, _a1 subscription.Subscription) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, subscription.Subscription) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSubscriptionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSubscriptionRepository creates a new instance of SubscriptionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSubscriptionRepository(t mockConstructorTestingTNewSubscriptionRepository) *SubscriptionRepository {
	mock := &SubscriptionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
