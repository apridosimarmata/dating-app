// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	user "dating-app/domain/user"

	mock "github.com/stretchr/testify/mock"
)

// UserCacheRepository is an autogenerated mock type for the UserCacheRepository type
type UserCacheRepository struct {
	mock.Mock
}

// GetUserCacheDetails provides a mock function with given fields: ctx, userUid
func (_m *UserCacheRepository) GetUserCacheDetails(ctx context.Context, userUid string) (*user.UserCacheDetails, error) {
	ret := _m.Called(ctx, userUid)

	var r0 *user.UserCacheDetails
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.UserCacheDetails); ok {
		r0 = rf(ctx, userUid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserCacheDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserCacheDetails provides a mock function with given fields: ctx, userUid, _a2
func (_m *UserCacheRepository) SetUserCacheDetails(ctx context.Context, userUid string, _a2 user.UserCacheDetails) error {
	ret := _m.Called(ctx, userUid, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, user.UserCacheDetails) error); ok {
		r0 = rf(ctx, userUid, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserCacheRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserCacheRepository creates a new instance of UserCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserCacheRepository(t mockConstructorTestingTNewUserCacheRepository) *UserCacheRepository {
	mock := &UserCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
