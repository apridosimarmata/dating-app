// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	user "dating-app/domain/user"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetUserCountByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserCountByEmail(ctx context.Context, email string) (int, error) {
	ret := _m.Called(ctx, email)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCountByUid provides a mock function with given fields: ctx, uid
func (_m *UserRepository) GetUserCountByUid(ctx context.Context, uid string) (int, error) {
	ret := _m.Called(ctx, uid)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetailsByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserDetailsByEmail(ctx context.Context, email string) (*user.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *user.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMiniDetailsByUserUid provides a mock function with given fields: ctx, userUid
func (_m *UserRepository) GetUserMiniDetailsByUserUid(ctx context.Context, userUid string) (*user.UserCacheDetails, error) {
	ret := _m.Called(ctx, userUid)

	var r0 *user.UserCacheDetails
	if rf, ok := ret.Get(0).(func(context.Context, string) *user.UserCacheDetails); ok {
		r0 = rf(ctx, userUid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.UserCacheDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userUid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: ctx, _a1
func (_m *UserRepository) InsertUser(ctx context.Context, _a1 user.User) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
