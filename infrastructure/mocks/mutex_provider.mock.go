// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	redsync "github.com/go-redsync/redsync/v4"
	mock "github.com/stretchr/testify/mock"
)

// MutexProvider is an autogenerated mock type for the MutexProvider type
type MutexProvider struct {
	mock.Mock
}

// Acquire provides a mock function with given fields: key
func (_m *MutexProvider) Acquire(key string) (*redsync.Mutex, error) {
	ret := _m.Called(key)

	var r0 *redsync.Mutex
	if rf, ok := ret.Get(0).(func(string) *redsync.Mutex); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redsync.Mutex)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Release provides a mock function with given fields: mutex
func (_m *MutexProvider) Release(mutex *redsync.Mutex) error {
	ret := _m.Called(mutex)

	var r0 error
	if rf, ok := ret.Get(0).(func(*redsync.Mutex) error); ok {
		r0 = rf(mutex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMutexProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMutexProvider creates a new instance of MutexProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMutexProvider(t mockConstructorTestingTNewMutexProvider) *MutexProvider {
	mock := &MutexProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
